import * as THREE from "three";
import { Event } from "../utils";
import { MarkupData, MarkupType } from "./Constants";
export declare abstract class BaseMarkup extends Event {
    protected readonly DEFAULT_LINE_WIDTH = 1;
    protected readonly DEFAULT_STROKE_STYLE = "#000000";
    protected readonly DEFAULT_FILL_STYLE = "#000000";
    protected abstract type: MarkupType;
    id: string;
    protected lineWidth: number;
    protected strokeStyle: string;
    protected fillStyle: string;
    protected x: number;
    protected y: number;
    protected points: THREE.Vector2[];
    protected width: number;
    protected height: number;
    protected tolerance: number;
    visible: boolean;
    selected: boolean;
    protected editPointSize: number;
    protected editPointColor: string;
    protected ctx?: CanvasRenderingContext2D;
    constructor(id: string);
    setTolerance(t: number): void;
    render(ctx: CanvasRenderingContext2D, camera: THREE.Camera): void;
    private drawBounds;
    getData(): MarkupData;
    setData(data: MarkupData): void;
    getVertexs(): THREE.Vector2[];
    setLineWidth(lineWidth?: number): void;
    setStrokeStyle(color?: string): void;
    setFillStyle(color?: string): void;
    isSelected(): boolean;
    drawEditPoints(ctx: CanvasRenderingContext2D, camera: THREE.Camera): void;
    drawCenter(ctx: CanvasRenderingContext2D, camera: THREE.Camera): void;
    private drawPoints;
    setEditPointSize(size: number): void;
    setEditPointColor(color: string): void;
    getCenter(): THREE.Vector2;
    transToScreenCoord(vector: THREE.Vector2, camera: THREE.Camera): THREE.Vector2;
    isPointInPath(p: THREE.Vector2): boolean;
    abstract getBounds(): THREE.Box2;
    abstract update(options: any): this;
    abstract draw(ctx: CanvasRenderingContext2D, camera: THREE.Camera): void;
    abstract translate(tx: number, ty: number): this;
    abstract rotate(angle: number): this;
    abstract scale(sx: number, sy: number): this;
}
