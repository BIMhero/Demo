import * as THREE from "three";
import { Event } from "../utils";
import { BimViewer, DxfViewer } from "../viewers";
import { BaseMarkup } from "./BaseMarkup";
import { ArrowMarkup } from "./ArrowMarkup";
import { CloudRectMarkup } from "./CloudRectMarkup";
import { CloudLineMarkup } from "./CloudLineMarkup";
import { CircleMarkup } from "./CircleMarkup";
import { DotMarkup } from "./DotMarkup";
import { EllipseMarkup } from "./EllipseMarkup";
import { PolylineMarkup } from "./PolylineMarkup";
import { RectMarkup } from "./RectMarkup";
import { TextMarkup } from "./TextMarkup";
import { XMarkup } from "./XMarkup";
import { MarkupData, MarkupType } from "./Constants";
export declare class MarkupManager extends Event {
    private viewer;
    private dataBox;
    private canvas?;
    context?: CanvasRenderingContext2D;
    private lineWidth;
    private strokeStyle;
    private fillStyle;
    private fontSize;
    protected mouseDown: boolean;
    protected mouseDownPositionX: number;
    protected mouseDownPositionY: number;
    private textInitialPosition?;
    private tempKey?;
    private tempArrowKeys?;
    private selectShape?;
    private type?;
    private isDrawing;
    private initialDataForEditing?;
    private creatingShape?;
    private tempPoints;
    private textInput?;
    private actived;
    private undoRedoHelper;
    constructor(viewer: BimViewer | DxfViewer);
    get viewerCanvas(): HTMLCanvasElement;
    get camera(): THREE.OrthographicCamera | THREE.PerspectiveCamera;
    get raycaster(): THREE.Raycaster;
    getPixelSize(scale: number, camera: THREE.Camera): number;
    private init;
    private initCanvas;
    toHighDpr(ctx: CanvasRenderingContext2D, width: number, height: number): CanvasRenderingContext2D;
    clearCanvas(): void;
    render(): void;
    viewChange: () => void;
    setMarkupsVisibility(visible: boolean): void;
    addMarkup(markup: BaseMarkup, needRecord?: boolean): void;
    updateMarkup(markup: BaseMarkup, newData: MarkupData, needRecord?: boolean): void;
    removeMarkup(markup: BaseMarkup, needRecord?: boolean): void;
    createMarkup(data: MarkupData): ArrowMarkup | CloudLineMarkup | CloudRectMarkup | CircleMarkup | DotMarkup | EllipseMarkup | PolylineMarkup | RectMarkup | TextMarkup | XMarkup | undefined;
    getMarkupById(id: string): BaseMarkup | undefined;
    clearAll(): void;
    isActived(): boolean;
    activate(): void;
    deactivate(): void;
    getActiveMarkupType(): MarkupType | undefined;
    setDrawType(type?: MarkupType): void;
    setSize(width: number, height: number): void;
    setLineWidth(linewidth: number): void;
    getLineWidth(): number;
    setStrokeStyle(color: string): void;
    getStrokeStyle(): string;
    setFillStyle(color: string): void;
    getFillStyle(): string;
    setFontSize(fontSize: number): void;
    getFontSize(): number;
    pickPositionByScreenPoint(p: THREE.Vector2): THREE.Vector2;
    pickThreePositionByMouse(e: MouseEvent): THREE.Vector2;
    mousedown: (e: MouseEvent) => void;
    mousemove: (e: MouseEvent) => void;
    mouseup: (e: MouseEvent) => void;
    keydown: (e: KeyboardEvent) => void;
    isEditing(): boolean;
    endEdit(selectMarkup: BaseMarkup): void;
    endDraw(createdMarkup?: BaseMarkup): void;
    getShapeByPoint(p: THREE.Vector2): BaseMarkup | undefined;
    getMarkupData(): MarkupData[];
    setMarkupData(markupShapes: MarkupData[]): void;
    private isCreateLineMode;
    private isCreateDotMode;
    private isCreateTextMode;
    private isCreateShapeMode;
    private drawShape;
    private drawLine;
    private drawText;
    private addInput;
    private measureInputLength;
    transToScreenCoord(vector: THREE.Vector2, camera: THREE.Camera): THREE.Vector2;
    static transToScreenCoord(vector: THREE.Vector2, camera: THREE.Camera, w: number, h: number): THREE.Vector2;
    toVecArr(points: number[][]): THREE.Vector2[];
    undo(): void;
    redo(): void;
    private canvasToImage;
    screenshot(option?: {
        type: string;
        quality: number;
    }): Promise<string | undefined>;
    destroy(): void;
}
